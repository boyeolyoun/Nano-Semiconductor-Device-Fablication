module seg_7 (rstb, clk, digit, seg_data);

input rstb ;
input clk ;


output reg [7:0] digit ;
output reg [6:0] seg_data ;


reg [16:0] clk_cnt ;
reg seg_clk;

always @(posedge clk or negedge rstb) begin
 if (!rstb) begin
 clk_cnt <= 17'd0;
 seg_clk <= 0; end
 else begin
 if (clk_cnt == 17'd99999) begin // 정상동작시 선택

 clk_cnt <= 17'd0;
 seg_clk <= ~seg_clk; end  
 else begin
 clk_cnt <= clk_cnt + 1;
 end
 end
end

always @(posedge seg_clk or negedge rstb) begin
 if (!rstb) begin
 digit <= 8'b1000_0000; end
 else begin
 digit <= {digit[0],digit[7:1]}; 
 
end
end

always @(posedge seg_clk or negedge rstb) begin
 if (!rstb) begin
 seg_data <= 7'd0; end
 else
 case(digit) 
 8'b1000_0000 : seg_data <= 7'b011_0000; // 1출력
 8'b0100_0000 : seg_data <= 7'b110_1101; // 2출력
 8'b0010_0000 : seg_data <= 7'b111_1001; // 3출력
 8'b0001_0000 : seg_data <= 7'b011_0011; // 4출력
 8'b0000_1000 : seg_data <= 7'b101_1011; // 5출력
 8'b0000_0100 : seg_data <= 7'b101_1111; // 6출력
 8'b0000_0010 : seg_data <= 7'b111_0010; // 7출력
 8'b0000_0001 : seg_data <= 7'b111_1111; // 8출력
 default : seg_data <= 7'd0;
 endcase
end

endmodule


############### test bench code

module tb_seg7;

reg rstb;
reg clk;

wire [7:0]      digit      ;
wire [7:0]      seg_data   ;

seg7 u0 (
 .rstb     (rstb), 
 .clk      (clk), 
 .digit    (digit), 
 .seg_data (seg_data) );

initial begin
rstb = 0; clk  = 0;  #100;
rstb = 1;  #10000000;
end

always #10 clk = ~clk;

endmodule
